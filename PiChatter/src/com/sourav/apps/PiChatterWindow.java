package com.sourav.apps;

import java.awt.Frame;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.util.Date;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import org.restlet.resource.ClientResource;

/**
 *
 * @author sourdatt
 */
public class PiChatterWindow extends javax.swing.JFrame {

    /**
     * Creates new form PiChatterWindow
     */
    private PiChatterWindow() {
        super(PiChatterMenu.TT_NORMAL);
        initComponents();
        final PiChatterWindow that = this;
        this.addWindowListener(new WindowListener() {

            @Override
            public void windowOpened(WindowEvent e) {
                
            }

            @Override
            public void windowClosing(WindowEvent e) {
                that.close();
            }

            @Override
            public void windowClosed(WindowEvent e) {
                
            }

            @Override
            public void windowIconified(WindowEvent e) {
                that.close();
            }

            @Override
            public void windowDeiconified(WindowEvent e) {
                
            }

            @Override
            public void windowActivated(WindowEvent e) {
                
            }

            @Override
            public void windowDeactivated(WindowEvent e) {
                
            }
        });
        
        pool = Executors.newSingleThreadExecutor();
    }
    
    public void open() {
        this.setVisible(true);
        this.setState(javax.swing.JFrame.NORMAL);
    }
    
    public void close() {
        this.setVisible(false);
    }
    
    public boolean isAlreadyOpen() {
        return this.isVisible();
    }
    
    public synchronized static PiChatterWindow getWindow() {
        if (instance == null) {
            instance = new PiChatterWindow();
        }
        
        return instance;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jTextField1 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);

        jTextArea1.setEditable(false);
        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jTextField1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextField1KeyReleased(evt);
            }
        });

        jButton1.setText("Send");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 582, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jTextField1)
                        .addGap(37, 37, 37)
                        .addComponent(jButton1)))
                .addContainerGap())
            .addComponent(jSeparator1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 294, Short.MAX_VALUE)
                .addGap(21, 21, 21)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1))
                .addGap(21, 21, 21))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        final String message = jTextField1.getText();
        if (message.length() > 0) {
            appendChat(" me: " + message);
            jTextField1.setText("");
            jTextField1.requestFocus();
            
            if (bean != null) {
                pool.execute(new Runnable() {
                    @Override
                    public void run() {
                        String to = "";
                        if (bean.getToName().length() > 0) {
                            to = bean.getToName();
                        }
                        else {
                            System.out.println("Not sure whom to send!!");
                        }

                        String dt = (new Date()).toString();

                        ClientResource client = new ClientResource(
                                "http://immense-atoll-6302.herokuapp.com/api/send/" +
                                bean.getName() + "/" +
                                to + "/" + dt + "/" +
                                PiCodec.encode(message)
                        );
                        client.get();
                    }
                });
            }
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jTextField1KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField1KeyReleased
        if (evt.getKeyChar() == '\n') {
            jButton1.doClick();
        }
    }//GEN-LAST:event_jTextField1KeyReleased

    public void setUserBean(UserBean bn) {
        bean = bn;
        setTitle(PiChatterMenu.TT_NORMAL + " (" + bean.getName() + ")");
    }
    
    public void appendChat(String msg) {
        jTextArea1.append(msg + "\n");
        jTextArea1.setCaretPosition(jTextArea1.getDocument().getLength());
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables
    private static PiChatterWindow instance = null;
    private UserBean bean = null;
    private ExecutorService pool;
}
